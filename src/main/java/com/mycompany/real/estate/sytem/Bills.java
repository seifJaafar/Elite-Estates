/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.real.estate.sytem;

import java.awt.geom.RoundRectangle2D;
import java.sql.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author S3IX6
 */
public class Bills extends javax.swing.JFrame {

    Connection Con = null;
    Statement St = null;
    Statement St1 = null;
    ResultSet Rs = null;
    ResultSet Rs1 = null;
    String DB_NAME = "jdbc:derby://localhost:1527/RealEstate";
    String DB_USER = "app";
    String DB_PASS = "app";
    java.util.Date CurrentDate = new java.util.Date();
    java.sql.Date SqlCurrentDate = new java.sql.Date(CurrentDate.getTime());
    public Bills() {
        initComponents();
        setShape(new RoundRectangle2D.Double(0, 0, getWidth(), getHeight(), 15, 15));
        FetchData();
        InsertPenaltyBills();
        SelectBill();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        STATE = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        TYPE = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        LIMITDATE = new com.toedter.calendar.JDateChooser();
        DELETE = new javax.swing.JButton();
        REFRESH = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        BillTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        APPARTMENTID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        CLIENTID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        INSERTDATE = new com.toedter.calendar.JDateChooser();
        UPDATE = new javax.swing.JButton();
        menu2 = new component.menu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1126, 621));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 190, 120));

        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 190, 40));

        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 190, 60));

        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 190, 40));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Manage  Bills");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("STATE");

        STATE.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        STATE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "payed", "not payed" }));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("TYPE");

        TYPE.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TYPE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "monthly pay", "penalty" }));
        TYPE.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Limit date");

        DELETE.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        DELETE.setIcon(new javax.swing.ImageIcon("C:\\Users\\S3IX6\\OneDrive\\Documents\\NetBeansProjects\\Real.estate.sytem\\src\\main\\java\\images\\delete.png")); // NOI18N
        DELETE.setText("Delete");
        DELETE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DELETE.setContentAreaFilled(false);
        DELETE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DELETEMouseClicked(evt);
            }
        });

        REFRESH.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        REFRESH.setIcon(new javax.swing.ImageIcon("C:\\Users\\S3IX6\\OneDrive\\Documents\\NetBeansProjects\\Real.estate.sytem\\src\\main\\java\\images\\refresh.png")); // NOI18N
        REFRESH.setText("Refresh");
        REFRESH.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        REFRESH.setContentAreaFilled(false);
        REFRESH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                REFRESHMouseClicked(evt);
            }
        });

        BillTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "IDAppartment", "IDClient", "NomClient", "Price", "InsertionDate", "LimitDay", "State", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        BillTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BillTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BillTable);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Appartment ID");

        APPARTMENTID.setEditable(false);
        APPARTMENTID.setEnabled(false);
        APPARTMENTID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                APPARTMENTIDActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Client ID");

        CLIENTID.setEnabled(false);
        CLIENTID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLIENTIDActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Insertion date");

        INSERTDATE.setEnabled(false);
        INSERTDATE.setOpaque(false);

        UPDATE.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        UPDATE.setIcon(new javax.swing.ImageIcon("C:\\Users\\S3IX6\\OneDrive\\Documents\\NetBeansProjects\\Real.estate.sytem\\src\\main\\java\\images\\update.png")); // NOI18N
        UPDATE.setText("Update");
        UPDATE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        UPDATE.setContentAreaFilled(false);
        UPDATE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UPDATEMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(UPDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(DELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(REFRESH, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(STATE, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LIMITDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TYPE, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(INSERTDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CLIENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(APPARTMENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(377, 377, 377)
                        .addComponent(jLabel1)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(STATE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TYPE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CLIENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LIMITDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(APPARTMENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(INSERTDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(86, 86, 86)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(REFRESH, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UPDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(191, 0, 940, -1));
        getContentPane().add(menu2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 620));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BillTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillTableMouseClicked
         int rowIndex = BillTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) BillTable.getModel();
        java.sql.Date sqlLimitDate = (java.sql.Date) model.getValueAt(rowIndex,5);
        java.sql.Date sqlInsertDate = (java.sql.Date) model.getValueAt(rowIndex,4);
        java.util.Date utilLimitDate = new java.util.Date(sqlLimitDate.getTime());
        java.util.Date utilInsertDate = new java.util.Date(sqlInsertDate.getTime());
        LIMITDATE.setDate(utilLimitDate);
        INSERTDATE.setDate(utilInsertDate);
        APPARTMENTID.setText(model.getValueAt(rowIndex,0).toString());
        CLIENTID.setText(model.getValueAt(rowIndex,1).toString());
        STATE.setSelectedItem(model.getValueAt(rowIndex,6));
        TYPE.setSelectedItem(model.getValueAt(rowIndex,7));
    }//GEN-LAST:event_BillTableMouseClicked
    
    private void APPARTMENTIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_APPARTMENTIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_APPARTMENTIDActionPerformed

    private void CLIENTIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLIENTIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CLIENTIDActionPerformed

    private void UPDATEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UPDATEMouseClicked
           java.util.Date InsertionDate = INSERTDATE.getDate();
            java.sql.Date myInsertDate = new java.sql.Date(InsertionDate.getTime());
            java.util.Date LimitDate = LIMITDATE.getDate();
            java.sql.Date myLimitDate = new java.sql.Date(LimitDate.getTime());
        if(LIMITDATE.getDate().toString().isEmpty() ||INSERTDATE.getDate().toString().isEmpty()|| APPARTMENTID.getText().isEmpty() || CLIENTID.getText().isEmpty() || STATE.getSelectedItem().toString().isEmpty() || TYPE.getSelectedItem().toString().isEmpty() ){
            JOptionPane.showMessageDialog(this,"Missing Information you need to select the rent that you want to update(you can't update ClientID and AppartmentId and insertionDate)!");
        }else{
            try{
                if(LimitDate.toString().isEmpty() == false && (myLimitDate.before(myInsertDate) || myLimitDate.before(SqlCurrentDate))){
                    JOptionPane.showMessageDialog(this,"Please verify that the limit date is after the insertion date and today !");
                }else{
                Con = DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
                PreparedStatement Upd = Con.prepareStatement("Update BILLS set STATE = ? , LIMIT_DATE = ? WHERE CLIENT_ID = ? AND APPARTMENT_ID= ? AND INSERTION_DATE = ? AND TYPE = ?");
                Upd.setString(1,STATE.getSelectedItem().toString());
                Upd.setDate(2, myLimitDate);
                System.out.println(myLimitDate);
                Upd.setString(3,CLIENTID.getText());
                Upd.setString(4,APPARTMENTID.getText());
                System.out.println(APPARTMENTID.getText());
                Upd.setDate(5,myInsertDate);
                Upd.setString(6,TYPE.getSelectedItem().toString().toLowerCase());
                System.out.println(TYPE.getSelectedItem().toString());
                int row = Upd.executeUpdate();
                JOptionPane.showMessageDialog(this,"Bill Successfully Updated (You can't change the ClientID and AppartmentID and Inseration Date)!");
                }
                
                Con.close();
                SelectBill();
            }catch(SQLException e){
                e.printStackTrace();
            }
        }  
    }//GEN-LAST:event_UPDATEMouseClicked

    private void DELETEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DELETEMouseClicked
         if(APPARTMENTID.getText().isEmpty() || CLIENTID.getText().isEmpty() || INSERTDATE.getDate().toString().isEmpty() || TYPE.getSelectedItem().toString().isEmpty() ){
            JOptionPane.showMessageDialog(this, "Select the Bill To be Deleted");
        }else{
            try{
                java.util.Date InsertionDate = INSERTDATE.getDate();
                java.sql.Date myInsertDate = new java.sql.Date(InsertionDate.getTime());
                int a = JOptionPane.showConfirmDialog(null,"Do you really want to delete the Bill?","select",JOptionPane.YES_NO_OPTION);
                 if(a == 0){
                      Con = DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
                      
                      PreparedStatement Del = Con.prepareStatement("Delete from BILLS where CLIENT_ID = ? and APPARTMENT_ID = ? AND TYPE = ? AND INSERTION_DATE = ?");
                      Del.setString(1,CLIENTID.getText());
                      Del.setString(2,APPARTMENTID.getText());
                      Del.setString(3,TYPE.getSelectedItem().toString().toLowerCase());
                      Del.setDate(4,myInsertDate);
                      int row = Del.executeUpdate();
                }
                JOptionPane.showMessageDialog(this,"Bill Successfully Deleted !");
                SelectBill();
                Con.close();
            }catch(SQLException e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_DELETEMouseClicked

    private void REFRESHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_REFRESHMouseClicked
        FetchData();
        InsertPenaltyBills();
        SelectBill();
    }//GEN-LAST:event_REFRESHMouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        setVisible(false);
        new  Appartments().setVisible(true);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
         setVisible(false);
         new  Clients1().setVisible(true);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        setVisible(false);
        new  Locations().setVisible(true);
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        setVisible(false);
        new  Dashboard().setVisible(true);
    }//GEN-LAST:event_jLabel11MouseClicked

    public void SelectBill(){
        try{
             Con = DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
             St1 = Con.createStatement();
             Rs1 = St1.executeQuery("Select b.* ,a.Price ,c.prenom || ' ' || c.nom as NomClient from BILLS b join CLIENTS c on b.CLIENT_ID = c.ID JOIN APPARTEMENTS a ON b.APPARTMENT_ID = a.ID");
            /* AppartementsTable.setModel(new ResultSetHandler.handle(Rs1)); */  
            DefaultTableModel tableModel = new DefaultTableModel();
            tableModel.addColumn("IDAPPARTMENT");
            tableModel.addColumn("IDCLIENT");
            tableModel.addColumn("NOMCLIENT");
            tableModel.addColumn("PRICE");
            tableModel.addColumn("INSERTIONDATE");
            tableModel.addColumn("LIMITDAY");
            tableModel.addColumn("STATE");
            tableModel.addColumn("TYPE");
        while (Rs1.next()) {
            Object[] row = new Object[8];
            row[1] = Rs1.getString("CLIENT_ID");
            row[0] = Rs1.getString("APPARTMENT_ID");
            row[2] = Rs1.getString("NomClient");
            row[3] = Rs1.getDouble("Price");
            row[4] = Rs1.getDate("INSERTION_DATE");
            row[5] = Rs1.getDate("LIMIT_DATE");
            row[6]= Rs1.getString("STATE");
            row[7]= Rs1.getString("TYPE");
            tableModel.addRow(row);
        }

        BillTable.setModel(tableModel);
        Con.close();
        }catch(SQLException e){
            e.printStackTrace();
        }
       
    }
    public void FetchData(){
        try{
            Con =DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
           String fetchSql = "SELECT l.IDCLIENT, l.IDAPPARTMENT, app.PRICE " +
                 "from LOCATIONS l join APPARTEMENTS app on l.IDAPPARTMENT = app.ID " +
                 "WHERE MONTH(CURRENT_DATE) BETWEEN MONTH(l.BEGINDATE) AND MONTH(l.ENDDATE)";
             PreparedStatement fetchStatement = Con.prepareStatement(fetchSql);
             ResultSet resultSet = fetchStatement.executeQuery();
             while(resultSet.next()){
                 String clientId = resultSet.getString("IDCLIENT");
                 String AppartmentId = resultSet.getString("IDAPPARTMENT");
                 Double price = resultSet.getDouble("PRICE");
                 
                 boolean dataExists = checkDataExists(Con, clientId, AppartmentId);
                  if (!dataExists) {
                    insertDataIntoBills(Con, clientId, AppartmentId,price);
                }
             }
            }catch(SQLException e){
            e.printStackTrace();
        }}
    public void InsertPenaltyBills(){
        try{
            Con =DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
           String fetchSql = "SELECT * " +
                 "from BILLS " +
                 "WHERE CURRENT_DATE >= LIMIT_DATE AND STATE = 'not payed' AND TYPE = 'monthly pay'";
             PreparedStatement fetchStatement = Con.prepareStatement(fetchSql);
             ResultSet resultSet = fetchStatement.executeQuery();
             while(resultSet.next()){
                 String clientId = resultSet.getString("CLIENT_ID");
                 String AppartmentId = resultSet.getString("APPARTMENT_ID");
                 Double price = resultSet.getDouble("PRICE");
                 
                 boolean dataExists = checkPenaltyExists(Con, clientId, AppartmentId);
                  if (!dataExists) {
                    insertPenaltyIntoBills(Con, clientId, AppartmentId,price);
                }
             }
            }catch(SQLException e){
            e.printStackTrace();
        }}
     public boolean checkPenaltyExists(Connection Con, String clientId, String appartmentId) throws SQLException {
        String checkSql = "SELECT * FROM bills "
                        + "WHERE client_id = ? AND appartment_id = ? AND type = 'penalty' "
                        + "AND MONTH(insertion_date) = MONTH(CURRENT_DATE)";
        
        PreparedStatement checkStatement = Con.prepareStatement(checkSql);
        checkStatement.setString(1, clientId);
        checkStatement.setString(2, appartmentId);
        
        ResultSet resultSet = checkStatement.executeQuery();
        return resultSet.next();
    }
    public boolean checkDataExists(Connection Con, String clientId, String appartmentId) throws SQLException {
        String checkSql = "SELECT * FROM bills "
                        + "WHERE client_id = ? AND appartment_id = ? AND type = 'monthly pay' "
                        + "AND MONTH(insertion_date) = MONTH(CURRENT_DATE)";
        
        PreparedStatement checkStatement = Con.prepareStatement(checkSql);
        checkStatement.setString(1, clientId);
        checkStatement.setString(2, appartmentId);
        
        ResultSet resultSet = checkStatement.executeQuery();
        return resultSet.next();
    }
      public void insertPenaltyIntoBills(Connection conn, String clientId, String appartmentId,double Price) throws SQLException {
         java.util.Date currentDate = new java.util.Date();
        long oneWeekInMillis = 7 * 24 * 60 * 60 * 1000; 
        java.util.Date limitDate = new java.util.Date(currentDate.getTime() + oneWeekInMillis);
         String insertSql = "INSERT INTO bills "
                         + "VALUES (?, ?, 'penalty',CURRENT_DATE,?,?,'not payed')";
        Double insertPrice = Price * 0.1;
        PreparedStatement insertStatement = conn.prepareStatement(insertSql);
        insertStatement.setString(1,clientId);
        insertStatement.setString(2, appartmentId);
        insertStatement.setDate(3,new java.sql.Date(limitDate.getTime()));
        insertStatement.setDouble(4,insertPrice);
        
        insertStatement.executeUpdate();
    }
     public void insertDataIntoBills(Connection conn, String clientId, String appartmentId,double Price) throws SQLException {
         java.util.Date currentDate = new java.util.Date();
        long oneWeekInMillis = 7 * 24 * 60 * 60 * 1000; 
        java.util.Date limitDate = new java.util.Date(currentDate.getTime() + oneWeekInMillis);
         String insertSql = "INSERT INTO bills "
                         + "VALUES (?, ?, 'monthly pay',CURRENT_DATE,?,?,'not payed')";
        
        PreparedStatement insertStatement = conn.prepareStatement(insertSql);
        insertStatement.setString(1,clientId);
        insertStatement.setString(2, appartmentId);
        insertStatement.setDate(3,new java.sql.Date(limitDate.getTime()));
        insertStatement.setDouble(4,Price);
        
        insertStatement.executeUpdate();
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bills.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bills.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bills.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bills.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Bills().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField APPARTMENTID;
    private javax.swing.JTable BillTable;
    private javax.swing.JTextField CLIENTID;
    private javax.swing.JButton DELETE;
    private com.toedter.calendar.JDateChooser INSERTDATE;
    private com.toedter.calendar.JDateChooser LIMITDATE;
    private javax.swing.JButton REFRESH;
    private javax.swing.JComboBox<String> STATE;
    private javax.swing.JComboBox<String> TYPE;
    private javax.swing.JButton UPDATE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private component.menu menu2;
    // End of variables declaration//GEN-END:variables
}
