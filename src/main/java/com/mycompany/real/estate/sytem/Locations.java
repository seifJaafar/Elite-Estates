package com.mycompany.real.estate.sytem;


import java.awt.geom.RoundRectangle2D;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author S3IX6
 */
public class Locations extends javax.swing.JFrame {
    Connection Con = null;
    Statement St = null;
    Statement St1 = null;
    ResultSet Rs = null;
    ResultSet Rs1 = null;
    String DB_NAME = "jdbc:derby://localhost:1527/RealEstate";
    String DB_USER = "app";
    String DB_PASS = "app";
    java.util.Date BeginDate;
    java.util.Date EndDate;
    java.sql.Date myBeginDate;
    java.sql.Date myEndDate;
    java.util.Date CurrentDate = new java.util.Date();
    java.sql.Date SqlCurrentDate = new java.sql.Date(CurrentDate.getTime());
    public Locations() {
        initComponents();
        setShape(new RoundRectangle2D.Double(0, 0, getWidth(), getHeight(), 15, 15));
        menu1.initMoving(this);
        DeleteOld();
        SelectLocation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        menu1 = new component.menu();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        APPID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CLIENTID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        BEGINDATE = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        ENDDATE = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        NBPERSONNES = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        locationtable = new javax.swing.JTable();
        Addbtn = new javax.swing.JButton();
        Updatebtn = new javax.swing.JButton();
        Deletebtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 190, 50));

        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 190, 40));

        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 190, 60));

        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 190, 50));
        getContentPane().add(menu1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 690));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Manage  Renting");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Aappartment ID");

        APPID.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        APPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                APPIDActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Client ID");

        CLIENTID.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        CLIENTID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLIENTIDActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Begin Date");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("End Date");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Number of persons");

        NBPERSONNES.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        NBPERSONNES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NBPERSONNESActionPerformed(evt);
            }
        });

        locationtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "IdClient", "IdAppartment", "NomClient", "BeginDate", "EndDate", "NbrPersonne"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        locationtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locationtableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(locationtable);

        Addbtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Addbtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\S3IX6\\OneDrive\\Documents\\NetBeansProjects\\Real.estate.sytem\\src\\main\\java\\images\\add.png")); // NOI18N
        Addbtn.setText("ADD");
        Addbtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Addbtn.setContentAreaFilled(false);
        Addbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddbtnMouseClicked(evt);
            }
        });
        Addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddbtnActionPerformed(evt);
            }
        });

        Updatebtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Updatebtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\S3IX6\\OneDrive\\Documents\\NetBeansProjects\\Real.estate.sytem\\src\\main\\java\\images\\update.png")); // NOI18N
        Updatebtn.setText("UPDATE");
        Updatebtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Updatebtn.setContentAreaFilled(false);
        Updatebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdatebtnMouseClicked(evt);
            }
        });
        Updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatebtnActionPerformed(evt);
            }
        });

        Deletebtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Deletebtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\S3IX6\\OneDrive\\Documents\\NetBeansProjects\\Real.estate.sytem\\src\\main\\java\\images\\delete.png")); // NOI18N
        Deletebtn.setText("DELETE");
        Deletebtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Deletebtn.setContentAreaFilled(false);
        Deletebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeletebtnMouseClicked(evt);
            }
        });
        Deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(Updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(Deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NBPERSONNES, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CLIENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(APPID, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ENDDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(73, 73, 73)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(BEGINDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(135, 135, 135))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(335, 335, 335)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(APPID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(BEGINDATE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ENDDATE, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CLIENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NBPERSONNES, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(191, 0, 930, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public void DeleteOld(){
        try{
             Con =DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
           String fetchSql = "SELECT * " +
                 "from Locations " +
                 "WHERE CURRENT_DATE >= ENDDATE";
             PreparedStatement fetchStatement = Con.prepareStatement(fetchSql);
             ResultSet resultSet = fetchStatement.executeQuery();
             while(resultSet.next()){
                 
                 String clientId = resultSet.getString("IDCLIENT");
                 String AppartmentId = resultSet.getString("IDAPPARTMENT");
                 String fetchsql2 = "select * from LOCATIONS WHERE IDAPPARTMENT = ? ";
                 PreparedStatement fetchStatement2= Con.prepareStatement(fetchsql2);
                 fetchStatement2.setString(1,AppartmentId);
                 ResultSet resultSet2 = fetchStatement2.executeQuery();
                 if(!resultSet2.next()){
                     PreparedStatement app = Con.prepareStatement("Update APPARTEMENTS set CONDITION = 'free' where ID = ?");
                     app.setString(1,APPID.getText());
                     int row0 = app.executeUpdate();
                 }
                 String DeleteSql = "DELETE FROM LOCATIONS WHERE IDCLIENT = ? AND IDAPPARTMENT = ?";
                 PreparedStatement deleteStatement = Con.prepareStatement(DeleteSql);
                 deleteStatement.setString(1,clientId);
                 deleteStatement.setString(2,AppartmentId);
                 deleteStatement.executeUpdate();
             }
        }catch(SQLException e){
            e.printStackTrace();
        }
            
    }
     public void SelectLocation(){
        try{
             Con = DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
             St1 = Con.createStatement();
                Rs1 = St1.executeQuery("Select l.* , c.prenom || ' ' || c.nom as NomClient from LOCATIONS l join CLIENTS c on l.IDCLIENT = c.ID");
            /* AppartementsTable.setModel(new ResultSetHandler.handle(Rs1)); */  
            DefaultTableModel tableModel = new DefaultTableModel();
            tableModel.addColumn("CLIENTID");
            tableModel.addColumn("APPARTID");
            tableModel.addColumn("NOMCLIENT");
            tableModel.addColumn("BEGINDATE");
            tableModel.addColumn("ENDDATE");
            tableModel.addColumn("Nbpersonne");
        while (Rs1.next()) {
            Object[] row = new Object[6];
            row[0] = Rs1.getString("IDCLIENT");
            row[1] = Rs1.getString("IDAPPARTMENT");
            row[2] = Rs1.getString("NomClient");
            row[3] = Rs1.getDate("BEGINDATE");
            row[4] = Rs1.getDate("ENDDATE");
            row[5]= Rs1.getInt("NBPERSONNES");
            tableModel.addRow(row);
        }

        locationtable.setModel(tableModel);
        Con.close();
        }catch(SQLException e){
            e.printStackTrace();
        }
       
    }
    private void APPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_APPIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_APPIDActionPerformed

    private void CLIENTIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLIENTIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CLIENTIDActionPerformed

    private void NBPERSONNESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NBPERSONNESActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NBPERSONNESActionPerformed

    private void AddbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddbtnMouseClicked
        BeginDate = BEGINDATE.getDate();
        myBeginDate = new java.sql.Date(BeginDate.getTime());
        EndDate = ENDDATE.getDate();
        myEndDate = new java.sql.Date(EndDate.getTime());
        
        try{
            Con = DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
           if(APPID.getText().isEmpty() || CLIENTID.getText().isEmpty() || NBPERSONNES.getText().isEmpty() || BEGINDATE.getDate().toString().isEmpty() || ENDDATE.getDate().toString().isEmpty()){
               JOptionPane.showMessageDialog(this,"Please Fill all the inputs !");
           }else{
               if(myEndDate.before(myBeginDate) || myEndDate.before(SqlCurrentDate)){
                   JOptionPane.showMessageDialog(this,"Please verify that the end date is after the begin date and before today !");
               }else{
                   boolean rented = checkRented(APPID.getText());
                   if(rented == false){
                     PreparedStatement app = Con.prepareStatement("Update APPARTEMENTS set CONDITION = 'rented' , NBRLOCATIONS =NBRLOCATIONS+1 where ID = ?");
                    app.setString(1,APPID.getText());
                    int row2 = app.executeUpdate();
            
            //incremente nbrlocation to client 
                PreparedStatement cl = Con.prepareStatement("Update CLIENTS set NBLOCATIONS = NBLOCATIONS + 1 where ID = ?");
                cl.setString(1,CLIENTID.getText());
                int row3 = cl.executeUpdate();
             //add location to its table
                PreparedStatement add = Con.prepareStatement("insert into LOCATIONS values (?,?,?,?,?)");
                add.setString(2, APPID.getText());
                add.setString(1,CLIENTID.getText());
                add.setDate(3,myBeginDate);
                add.setDate(4,myEndDate);
                add.setInt(5,Integer.valueOf(NBPERSONNES.getText()));
                int row = add.executeUpdate();
                JOptionPane.showMessageDialog(this,"Rent Successfully Added !");  
                   } else{
                       java.sql.Date last_EndDate = getLastDate(APPID.getText());
                       if(myBeginDate.after(last_EndDate) || myBeginDate.equals(last_EndDate)){
                           //incremente nbrlocation to client 
                        PreparedStatement cl = Con.prepareStatement("Update CLIENTS set NBLOCATIONS = NBLOCATIONS + 1 where ID = ?");
                        cl.setString(1,CLIENTID.getText());
                        int row3 = cl.executeUpdate();
                        //add location to its table
                        PreparedStatement add = Con.prepareStatement("insert into LOCATIONS values (?,?,?,?,?)");
                        add.setString(2, APPID.getText());
                        add.setString(1,CLIENTID.getText());
                        add.setDate(3,myBeginDate);
                        add.setDate(4,myEndDate);
                        add.setInt(5,Integer.valueOf(NBPERSONNES.getText()));
                        int row = add.executeUpdate();
                        JOptionPane.showMessageDialog(this,"Rent Successfully added !");
                       }else{
                          JOptionPane.showMessageDialog(this,"Sorry but the appartment is already rented for that time!"); 
                       }
                       
                   }
                  
               }   
           }
            Con.close();
            SelectLocation();
        }catch(SQLException e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error has occured please verify that the Appartment id and Client Id exists in their tables");
        }
    }//GEN-LAST:event_AddbtnMouseClicked
    public java.sql.Date getLastDate(String APPID) throws SQLException{

            java.sql.Date Last_EndDate = new java.sql.Date(0);
             PreparedStatement app = Con.prepareStatement("select * from LOCATIONS where IDAPPARTMENT = ?");
             app.setString(1,APPID);
             Rs1 = app.executeQuery();
             while(Rs1.next()){
                 java.sql.Date endDate = new java.sql.Date(Rs1.getDate("ENDDATE").getTime());
                 if(endDate.after(Last_EndDate)){
                     Last_EndDate = endDate;
                 } 
             }
            return Last_EndDate;
        
    }
    public boolean checkRented(String idappart) throws SQLException{
        String checkSql = "SELECT * FROM APPARTEMENTS "
                        + "WHERE ID = ? AND CONDITION IN ('rented','under renovation','under construction') ";
        
        PreparedStatement checkStatement = Con.prepareStatement(checkSql);
        checkStatement.setString(1, idappart);
        
        ResultSet resultSet = checkStatement.executeQuery();
        return resultSet.next();
    }
    private void AddbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddbtnActionPerformed

    private void UpdatebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdatebtnMouseClicked
            BeginDate = BEGINDATE.getDate();
            myBeginDate = new java.sql.Date(BeginDate.getTime());
            EndDate = ENDDATE.getDate();
            myEndDate = new java.sql.Date(EndDate.getTime());
        if(APPID.getText().isEmpty() || CLIENTID.getText().isEmpty() || NBPERSONNES.getText().isEmpty() || BEGINDATE.getDate().toString().isEmpty() ||ENDDATE.getDate().toString().isEmpty() ){
            JOptionPane.showMessageDialog(this,"Missing Information you need to select the rent that you want to update(you can't update ClientID and AppartmentId)!");
        }else{
            try{
                if(BeginDate.toString().isEmpty() == false && EndDate.toString().isEmpty() == false && (myEndDate.before(myBeginDate) || myEndDate.before(SqlCurrentDate))){
                    JOptionPane.showMessageDialog(this,"Please verify that the end date is after the begin date and before today !");
                }else{
                Con = DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
                PreparedStatement Upd = Con.prepareStatement("Update LOCATIONS set  BEGINDATE = ? , ENDDATE = ? , NBPERSONNES = ?  WHERE IDCLIENT = ? AND IDAPPARTMENT = ?");
                Upd.setString(5, APPID.getText());
                Upd.setString(4, CLIENTID.getText());
                Upd.setDate(1,myBeginDate);
                Upd.setDate(2,myEndDate);
                Upd.setInt(3,Integer.valueOf(NBPERSONNES.getText()));
                int row = Upd.executeUpdate();
                JOptionPane.showMessageDialog(this,"Appartment Successfully Updated (You can't change the ClientID and AppartmentID)!");
                }
                
                Con.close();
                SelectLocation();
            }catch(SQLException e){
                e.printStackTrace();
            }
        } 
    }//GEN-LAST:event_UpdatebtnMouseClicked

    private void UpdatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatebtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdatebtnActionPerformed

    private void DeletebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeletebtnMouseClicked
        if(APPID.getText().isEmpty() && CLIENTID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select the Rent you wantt to delete!");
        }else{
            try{
                int a = JOptionPane.showConfirmDialog(null,"Do you really want to delete the rent?","select",JOptionPane.YES_NO_OPTION);
                if(a == 0){
                    Con = DriverManager.getConnection(DB_NAME,DB_USER,DB_PASS);
                    //change the appartment condition from rented
                     PreparedStatement app = Con.prepareStatement("Update APPARTEMENTS set CONDITION = 'free' where ID = ?");
                     app.setString(1,APPID.getText());
                      int row0 = app.executeUpdate();
                    //delete the location
                    PreparedStatement Del = Con.prepareStatement("Delete from LOCATIONS where IDAPPARTMENT = ? AND IDCLIENT  = ?");
                    Del.setString(1,APPID.getText());
                    Del.setString(2,CLIENTID.getText());
                    int row = Del.executeUpdate();
                }
                JOptionPane.showMessageDialog(this,"RENT Successfully Deleted !");
                Con.close();
                SelectLocation();
            }catch(SQLException e){
                e.printStackTrace();
            }
        } 
    }//GEN-LAST:event_DeletebtnMouseClicked

    private void DeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeletebtnActionPerformed

    private void locationtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationtableMouseClicked
        
        int rowIndex = locationtable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) locationtable.getModel();
        java.sql.Date sqlBeginDate = (java.sql.Date) model.getValueAt(rowIndex,3);
        java.util.Date utilBeginDate = new java.util.Date(sqlBeginDate.getTime());
        java.sql.Date sqlEndDate = (java.sql.Date) model.getValueAt(rowIndex,4);
        java.util.Date utilEndDate = new java.util.Date(sqlEndDate.getTime());
        CLIENTID.setText(model.getValueAt(rowIndex, 0).toString());
        APPID.setText(model.getValueAt(rowIndex, 1).toString());
        NBPERSONNES.setText(model.getValueAt(rowIndex, 5).toString());
        BEGINDATE.setDate(utilBeginDate);
        ENDDATE.setDate(utilEndDate);
    }//GEN-LAST:event_locationtableMouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        setVisible(false);
        new Appartments().setVisible(true);
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        setVisible(false);
        new Clients1().setVisible(true);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        setVisible(false);
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        setVisible(false);
        new Bills().setVisible(true);
    }//GEN-LAST:event_jLabel10MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Locations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Locations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Locations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Locations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Locations().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField APPID;
    private javax.swing.JButton Addbtn;
    private com.toedter.calendar.JDateChooser BEGINDATE;
    private javax.swing.JTextField CLIENTID;
    private javax.swing.JButton Deletebtn;
    private com.toedter.calendar.JDateChooser ENDDATE;
    private javax.swing.JTextField NBPERSONNES;
    private javax.swing.JButton Updatebtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable locationtable;
    private component.menu menu1;
    // End of variables declaration//GEN-END:variables
}
